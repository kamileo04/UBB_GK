<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Subroutine Hierarchy</title>

    <script>
        var canvas;
        var graphics;

        var X_LEFT = -4;
        var X_RIGHT = 4;
        var Y_BOTTOM = -3;
        var Y_TOP = 3;

        var BACKGROUND = "white";

        var pixelSize;

        var frameNumber = 0;

        function drawWorld() {
            drawSeesaw(-2.5, -1.5, "purple", 1.5);
            drawSeesaw(2.5, -0.5, "green", 1);
            drawSeesaw(0, -4.5, "blue", 2);
        }

        function drawSeesaw(x, y, color, scale) {
            graphics.save();
            graphics.translate(x, y);
            graphics.scale(scale, scale);

            // Calculate the pochylenia
            const tiltAngle = -10 * Math.PI / 180;
            const translateY = 2;
            const translateX = 0;

            graphics.save();
            graphics.translate(translateX, translateY);
            graphics.rotate(tiltAngle);
            drawBeam();
            graphics.restore();

            drawSupport(color);

            graphics.restore();
        }

        function drawBeam() {
            graphics.save();
            graphics.strokeStyle = "black";
            drawDodecagon(-1.5 / 2, 0, frameNumber);
            drawDodecagon(1.5 / 2, 0, frameNumber);
            graphics.fillStyle = "red";
            graphics.fillRect(-1.5 / 2, 0, 1.5, 0.1);
            graphics.restore();
        }

        function drawSupport(color) {
            graphics.save();
            graphics.fillStyle = color;
            graphics.translate(0, 0.85);
            filledTriangle(graphics, 0.2, 1.2);
            graphics.restore();
        }

        function drawDodecagon(x, y, angle) {
            graphics.save();
            graphics.translate(x, 0.05);
            graphics.rotate(angle * Math.PI / 180);
            graphics.strokeStyle = "black";
            const radius = 0.25;

            graphics.beginPath();
            for (let i = 0; i < 12; i++) {
                const dodecagonAngle = 2 * Math.PI * i / 12;
                const px = radius * Math.cos(dodecagonAngle);
                const py = radius * Math.sin(dodecagonAngle);
                if (i === 0) {
                    graphics.moveTo(px, py);
                } else {
                    graphics.lineTo(px, py);
                }
            }
            graphics.closePath();
            graphics.stroke();

            for (let i = 0; i < 6; i++) {
                const diagonalAngle = Math.PI * i / 6;
                const x1 = radius * Math.cos(diagonalAngle);
                const y1 = radius * Math.sin(diagonalAngle);
                const x2 = radius * Math.cos(diagonalAngle + Math.PI);
                const y2 = radius * Math.sin(diagonalAngle + Math.PI);
                graphics.beginPath();
                graphics.moveTo(x1, y1);
                graphics.lineTo(x2, y2);
                graphics.stroke();
            }

            graphics.restore();
        }

        function filledTriangle(g2, base, height) {
            g2.beginPath();
            g2.moveTo(-base, 0);
            g2.lineTo(base, 0);
            g2.lineTo(0, height);
            g2.closePath();
            g2.fill();
        }

        function updateFrame() {
            frameNumber++;
        }

        function draw() {
            graphics.save();
            graphics.fillStyle = BACKGROUND;
            graphics.fillRect(0, 0, canvas.width, canvas.height);
            graphics.fillStyle = "black";
            applyLimits(graphics, X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM, false);
            graphics.lineWidth = pixelSize;
            drawWorld();
            graphics.restore();
        }

        function applyLimits(g, xleft, xright, ytop, ybottom, preserveAspect) {
            var width = canvas.width;
            var height = canvas.height;
            if (preserveAspect) {
                var displayAspect = Math.abs(height / width);
                var requestedAspect = Math.abs((ybottom - ytop) / (xright - xleft));
                var excess;
                if (displayAspect > requestedAspect) {
                    excess = (ybottom - ytop) * (displayAspect / requestedAspect - 1);
                    ybottom += excess / 2;
                    ytop -= excess / 2;
                } else if (displayAspect < requestedAspect) {
                    excess = (xright - xleft) * (requestedAspect / displayAspect - 1);
                    xright += excess / 2;
                    xleft -= excess / 2;
                }
            }
            var pixelWidth = Math.abs((xright - xleft) / width);
            var pixelHeight = Math.abs((ybottom - ytop) / height);
            pixelSize = Math.min(pixelWidth, pixelHeight);
            g.scale(width / (xright - xleft), height / (ybottom - ytop));
            g.translate(-xleft, -ytop);
        }

        var running = false;

        function frame() {
            if (running) {
                updateFrame();
                draw();
                requestAnimationFrame(frame);
            }
        }

        function doAnimationCheckbox() {
            var shouldRun = document.getElementById("animateCheck").checked;
            if (shouldRun != running) {
                running = shouldRun;
                if (running)
                    requestAnimationFrame(frame);
            }
        }

        function init() {
            canvas = document.getElementById("thecanvas");
            if (!canvas.getContext) {
                document.getElementById("message").innerHTML = "ERROR: Canvas not supported";
                return;
            }
            graphics = canvas.getContext("2d");
            document.getElementById("animateCheck").checked = false;
            document.getElementById("animateCheck").onchange = doAnimationCheckbox;
            draw();
        }

    </script>

</head>

<body onload="init()" style="background-color:#EEEEEE">

    <h3>Subroutine Hierarchy - Seesaw</h3>

    <noscript>
        <p><b style="color:red">Error: This page requires JavaScript, but it is not available.</b></p>
    </noscript>

    <p id="message"><label><input type="checkbox" id="animateCheck"><b>Run the Animation</b></label></p>

    <div style="float:left; border: 2px solid black">
        <canvas id="thecanvas" width="800" height="600" style="display:block"></canvas>
    </div>

</body>

</html>
