<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Scene Graph 2D</title>

    <script>
        var canvas;
        var graphics;

        var X_LEFT = -4;
        var X_RIGHT = 4;
        var Y_BOTTOM = -3;
        var Y_TOP = 3;

        var BACKGROUND = "white";

        var pixelSize;

        var frameNumber = 0;

        var world;

        var seesaws = [];

        function createWorld() {

            world = new CompoundObject();

            let seesaw1 = new Seesaw(-2.5, 0.5, "purple", 1.5);
            let seesaw2 = new Seesaw(2.5, 1, "green", 1);
            let seesaw3 = new Seesaw(0, -1.5, "blue", 2);
            seesaws.push(seesaw1);
            seesaws.push(seesaw2);
            seesaws.push(seesaw3);
            world.add(seesaw1);
            world.add(seesaw2);
            world.add(seesaw3);
        }

        function updateFrame() {
            frameNumber++;

            seesaws.forEach(seesaw => {
                seesaw.update(frameNumber);
            });
        }

        function SceneGraphNode() {
            this.fillColor = null;
            this.strokeColor = null;
        }
        SceneGraphNode.prototype.doDraw = function(g) {
            throw "doDraw not implemented in SceneGraphNode"
        }
        SceneGraphNode.prototype.draw = function(g) {
            graphics.save();
            if (this.fillColor) {
                g.fillStyle = this.fillColor;
            }
            if (this.strokeColor) {
                g.strokeStyle = this.strokeColor;
            }
            this.doDraw(g);
            graphics.restore();
        }
        SceneGraphNode.prototype.setFillColor = function(color) {
            this.fillColor = color;
            return this;
        }
        SceneGraphNode.prototype.setStrokeColor = function(color) {
            this.strokeColor = color;
            return this;
        }
        SceneGraphNode.prototype.setColor = function(color) {
            this.fillColor = color;
            this.strokeColor = color;
            return this;
        }

        function CompoundObject() {
            SceneGraphNode.call(this);
            this.subobjects = [];
        }
        CompoundObject.prototype = new SceneGraphNode();
        CompoundObject.prototype.add = function(node) {
            this.subobjects.push(node);
            return this;
        }
        CompoundObject.prototype.doDraw = function(g) {
            for (var i = 0; i < this.subobjects.length; i++)
                this.subobjects[i].draw(g);
        }

        function TransformedObject(object) {
            SceneGraphNode.call(this);
            this.object = object;
            this.rotationInDegrees = 0;
            this.scaleX = 1;
            this.scaleY = 1;
            this.translateX = 0;
            this.translateY = 0;
        }
        TransformedObject.prototype = new SceneGraphNode();
        TransformedObject.prototype.setRotation = function(angle) {
            this.rotationInDegrees = angle;
            return this;
        }
        TransformedObject.prototype.setScale = function(sx, sy) {
            this.scaleX = sx;
            this.scaleY = sy;
            return this;
        }
        TransformedObject.prototype.setTranslation = function(dx, dy) {
            this.translateX = dx;
            this.translateY = dy;
            return this;
        }
        TransformedObject.prototype.doDraw = function(g) {
            g.save();
            if (this.translateX != 0 || this.translateY != 0) {
                g.translate(this.translateX, this.translateY);
            }
            if (this.rotationInDegrees != 0) {
                g.rotate(this.rotationInDegrees / 180 * Math.PI);
            }
            if (this.scaleX != 1 || this.scaleY != 1) {
                g.scale(this.scaleX, this.scaleY);
            }
            this.object.draw(g);
            g.restore();
        }

        var line = new SceneGraphNode();
        line.doDraw = function(g) {
            g.beginPath();
            g.moveTo(-0.5, 0);
            g.lineTo(0.5, 0);
            g.stroke();
        }

        var filledRect = new SceneGraphNode();
        filledRect.doDraw = function(g) {
            g.fillRect(-0.5, -0.5, 1, 1);
        }

        var rect = new SceneGraphNode();
        rect.doDraw = function(g) {
            g.strokeRect(-0.5, -0.5, 1, 1);
        }

        var filledCircle = new SceneGraphNode();
        filledCircle.doDraw = function(g) {
            g.beginPath();
            g.arc(0, 0, 0.5, 0, 2 * Math.PI);
            g.fill();
        }

        var circle = new SceneGraphNode();
        circle.doDraw = function(g) {
            g.beginPath();
            g.arc(0, 0, 0.5, 0, 2 * Math.PI);
            g.stroke();
        }

        var filledTriangle = new SceneGraphNode();
        filledTriangle.doDraw = function(g) {
            g.beginPath();
            g.moveTo(-0.5, 0);
            g.lineTo(0.5, 0);
            g.lineTo(0, 1);
            g.closePath();
            g.fill();
        }

        function Dodecagon() {
            SceneGraphNode.call(this);
            this.rotation = 0;
        }
        Dodecagon.prototype = new SceneGraphNode();
        Dodecagon.prototype.setRotation = function(angle) {
            this.rotation = angle;
        }
        Dodecagon.prototype.doDraw = function(g) {
            g.save();
            g.rotate(this.rotation * Math.PI / 180);
            g.strokeStyle = "black";
            const radius = 0.25;

            g.beginPath();
            for (let i = 0; i < 12; i++) {
                const dodecagonAngle = 2 * Math.PI * i / 12;
                const px = radius * Math.cos(dodecagonAngle);
                const py = radius * Math.sin(dodecagonAngle);
                if (i === 0) {
                    g.moveTo(px, py);
                } else {
                    g.lineTo(px, py);
                }
            }
            g.closePath();
            g.stroke();

            for (let i = 0; i < 6; i++) {
                const diagonalAngle = Math.PI * i / 6;
                const x1 = radius * Math.cos(diagonalAngle);
                const y1 = radius * Math.sin(diagonalAngle);
                const x2 = radius * Math.cos(diagonalAngle + Math.PI);
                const y2 = radius * Math.sin(diagonalAngle + Math.PI);
                g.beginPath();
                g.moveTo(x1, y1);
                g.lineTo(x2, y2);
                g.stroke();
            }

            g.restore();
        }

        function Seesaw(x, y, color, scale) {
            CompoundObject.call(this);

            this.x = x;
            this.y = y;
            this.color = color;
            this.scale = scale;
            this.tiltAngle = -10 * Math.PI / 180;
            this.dodecagonRotation = 0;

            this.beam = new CompoundObject();
            let leftDodecagon = new TransformedObject(new Dodecagon());
            leftDodecagon.setTranslation(-1.5 / 2, 0);
            this.beam.add(leftDodecagon);

            let rightDodecagon = new TransformedObject(new Dodecagon());
            rightDodecagon.setTranslation(1.5 / 2, 0);
            this.beam.add(rightDodecagon);

            let beamRect = new TransformedObject(filledRect);
            beamRect.setScale(1.5, 0.1).setColor("red");
            this.beam.add(beamRect);

            let transformedBeam = new TransformedObject(this.beam);
            transformedBeam.setRotation(this.tiltAngle / Math.PI * 180);
            transformedBeam.setTranslation(0, 0.5);

            this.add(transformedBeam);

            let support = new TransformedObject(filledTriangle);
            support.setScale(0.35, 1.2).setColor(color).setTranslation(0, -0.7);
            this.add(support);

            this.translateX = x;
            this.translateY = y;
            this.scaleX = scale;
            this.scaleY = scale;
        }
        Seesaw.prototype = new CompoundObject();
        Seesaw.prototype.update = function(frameNumber) {
            this.dodecagonRotation = frameNumber;
            this.beam.subobjects.forEach(obj => {
                if (obj instanceof TransformedObject && obj.object instanceof Dodecagon) {
                    obj.object.setRotation(this.dodecagonRotation);
                }
            });
        }
        Seesaw.prototype.doDraw = function(g) {
            g.save();
            g.translate(this.translateX, this.translateY);
            g.scale(this.scaleX, this.scaleY);
            CompoundObject.prototype.doDraw.call(this, g);
            g.restore();
        }

        function draw() {
            graphics.save();
            graphics.fillStyle = BACKGROUND;
            graphics.fillRect(0, 0, canvas.width, canvas.height);
            graphics.fillStyle = "black";
            applyLimits(graphics, X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM, false);
            graphics.lineWidth = pixelSize;
            world.draw(graphics);
            graphics.restore();
        }

        function applyLimits(g, xleft, xright, ytop, ybottom, preserveAspect) {
            var width = canvas.width;
            var height = canvas.height;
            if (preserveAspect) {
                var displayAspect = Math.abs(height / width);
                var requestedAspect = Math.abs((ybottom - ytop) / (xright - xleft));
                var excess;
                if (displayAspect > requestedAspect) {
                    excess = (ybottom - ytop) * (displayAspect / requestedAspect - 1);
                    ybottom += excess / 2;
                    ytop -= excess / 2;
                } else if (displayAspect < requestedAspect) {
                    excess = (xright - xleft) * (requestedAspect / displayAspect - 1);
                    xright += excess / 2;
                    xleft -= excess / 2;
                }
            }
            var pixelWidth = Math.abs((xright - xleft) / width);
            var pixelHeight = Math.abs((ybottom - ytop) / height);
            pixelSize = Math.min(pixelWidth, pixelHeight);
            g.scale(width / (xright - xleft), height / (ybottom - ytop));
            g.translate(-xleft, -ytop);
        }

        var running = false;

        function frame() {
            if (running) {
                updateFrame();
                draw();
                requestAnimationFrame(frame);
            }
        }

        function doAnimationCheckbox() {
            var shouldRun = document.getElementById("animateCheck").checked;
            if (shouldRun != running) {
                running = shouldRun;
                if (running)
                    requestAnimationFrame(frame);
            }
        }

        function init() {
            canvas = document.getElementById("thecanvas");
            if (!canvas.getContext) {
                document.getElementById("message").innerHTML = "ERROR: Canvas not supported";
                return;
            }
            graphics = canvas.getContext("2d");
            document.getElementById("animateCheck").checked = false;
            document.getElementById("animateCheck").onchange = doAnimationCheckbox;
            createWorld();
            draw();
        }

    </script>

</head>

<body onload="init()" style="background-color:#EEEEEE">

    <h3>Scene Graph 2D</h3>

    <noscript>
        <p><b style="color:red">Error: This page requires JavaScript, but it is not available.</b></p>
    </noscript>

    <p id="message"><label><input type="checkbox" id="animateCheck"><b>Run the Animation</b></label></p>

    <div style="float:left; border: 2px solid black">
        <canvas id="thecanvas" width="800" height="600" style="display:block"></canvas>
    </div>


</body>

</html>
